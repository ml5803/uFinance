AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DBUsername: 
    Type: String
    Default: ""
  DBPassword:
    Type: String
    Default: ""

Resources:
  # S3 bucket used to storage image receipts
  uFinanceImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

  # API Gateway used to interface with frontend
  uFinanceAPIG:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "uFinanceAPIG"

  uFinanceAPIGDeployment:
    DependsOn: [uFinanceAPIGRegister, uFinanceAPIGLogin]
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref uFinanceAPIG
      Description: Deploy APIG for uFinance
      StageName: test
  
  # /register
  uFinanceAPIGRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: register
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIGRegister:
      DependsOn: uFinanceAPIGRegisterResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: register
        ResourceId: !Ref uFinanceAPIGRegisterResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterAuthLambda.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  # /login
  uFinanceAPIGLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: login
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIGLogin:
      DependsOn: uFinanceAPIGLoginResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: login
        ResourceId: !Ref uFinanceAPIGLoginResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginAuthLambda.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  #expense
  uFinanceAPIGExpenseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: expense
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIGExpense:
      DependsOn: uFinanceAPIGExpenseResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: expense
        ResourceId: !Ref uFinanceAPIGExpenseResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExpenseHandlerLambda.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  # /groups
  uFinanceAPIGroupsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: groups
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIGroups:
      DependsOn: uFinanceAPIGroupsResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: groups
        ResourceId: !Ref uFinanceAPIGroupsResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GroupHandlerLambda.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  # /group
  uFinanceAPIIndiGroupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: group
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIIndiGroup:
      DependsOn: uFinanceAPIIndiGroupResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: group
        ResourceId: !Ref uFinanceAPIIndiGroupResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndiGroupHandlerLambda.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  #extract
  uFinanceReceiptExtractResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt uFinanceAPIG.RootResourceId
      PathPart: extract
      RestApiId: !Ref uFinanceAPIG

  uFinanceAPIReceipt:
      DependsOn: uFinanceReceiptExtractResource
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        OperationName: extract
        ResourceId: !Ref uFinanceReceiptExtractResource
        RestApiId: !Ref uFinanceAPIG
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnalyzeTextract.Arn}/invocations"
          Credentials: !GetAtt RootRole.Arn

  #mySQL Database
  uFinanceDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "uFinance"
      Engine: MySQL
      EngineVersion: 8.0.20
      Port: 3306
      PubliclyAccessible: True
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPassword
      
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: WebServerSecurityGroup
      GroupDescription: Frontend Access

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  #Lambda Permissions
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "uFinanceFullAccess"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - 
          Ref: "RootRole"

  # /serverless Lambda handlers
  UploadS3Lambda: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Upload File to S3 
      FunctionName: UploadImageBucket
      MemorySize: 512 
      Handler: handlers.finance.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 

  LoginAuthLambda: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Authenticate user based on credentials
      FunctionName: UserLogin
      MemorySize: 512 
      Handler: handlers.login.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 
    
  RegisterAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create user credentials
      FunctionName: UserRegister
      MemorySize: 512 
      Handler: handlers.register.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 
    
  ExpenseHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle operations regarding user expenses
      FunctionName: HandleExpense
      MemorySize: 512 
      Handler: handlers.expense_handler.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 

  GroupHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle operations regarding user groups
      FunctionName: HandleGroups
      MemorySize: 512 
      Handler: handlers.groups_handler.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 

  IndiGroupHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle operations for a selected group
      FunctionName: HandleGroup
      MemorySize: 512 
      Handler: handlers.group_handler.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 

  AnalyzeTextract: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Analyze the file in textract
      FunctionName: AnalyzeReceipt
      MemorySize: 512 
      Handler: handlers.textract.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RootRole.Arn
      Timeout: 900 

Outputs:
  BucketName:
    Value: !Ref uFinanceImageBucket
    Description: Image bucket for uFinance
  RootAPIGId:
    Value: !GetAtt uFinanceAPIG.RootResourceId
  DBEndpoint:
    Value: !GetAtt uFinanceDB.Endpoint.Address
  DBPort:
    Value: !GetAtt uFinanceDB.Endpoint.Port